name: 'main2 ☞ output/subscribe ✔'

on:
  schedule:
    - cron: '20 17 * * *'  # 定时任务触发时间（UTC时间）
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'  # 手动触发时的默认环境

env:
  PYTHON_VERSION: '3.10'        # 指定使用的Python版本
  RETAIN_DAYS: 7                # 历史归档文件保留天数
  HISTORY_DIR: 'history'        # 历史归档文件存储目录
  FILES_TO_ARCHIVE: >-          # 需要归档的文件列表
    output/subscribe/full.txt
    output/subscribe/simple.txt
    output/subscribe/others.txt
    output/subscribe/sports.html
    output/subscribe/custom.txt
    output/subscribe/full.m3u
    output/subscribe/simple.m3u
    output/subscribe/custom.m3u

jobs:
  run_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write          # 允许写入仓库内容
      pull-requests: write     # 允许操作Pull Requests

    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main  # 拉取main分支代码

      - name: 强制同步远程代码
        run: git fetch --prune && git reset --hard origin/main  # 确保本地代码与远程完全一致

      - name: 安装Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}  # 配置指定版本的Python环境

      - name: 缓存依赖包
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip  # 缓存pip依赖的路径
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  # 缓存键
          restore-keys: |
            ${{ runner.os }}-pip-  # 缓存恢复规则

      - name: 安装依赖（补充requests）
        run: |
          python -m pip install --upgrade pip
          # 仅添加缺失的requests依赖，保持原脚本可用
          pip install opencc-python-reimplemented pytz requests || { 
            echo "依赖安装失败，重试一次"; 
            pip install opencc-python-reimplemented pytz requests; 
          }

      - name: 同步代码并生成文件
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git reset --hard HEAD
          git pull origin main --rebase || { 
            echo "变基冲突，自动用远程最新代码覆盖本地";
            git rebase --abort;
            git pull origin main --force;
          }
          python main2.py || { 
            echo "首次生成文件失败，重试一次"; 
            python main2.py || { 
              echo "生成文件失败，终止流程"; 
              exit 1; 
            } 
          }

      - name: 校验文件完整性（修正路径）
        run: |
          # 修正文件路径为脚本实际输出的output/subscribe/目录
          critical_files=("output/subscribe/full.txt" "output/subscribe/custom.txt")
          for file in "${critical_files[@]}"; do
            if [ ! -s "$file" ]; then
              echo "错误：$file 为空或不存在，终止提交";
              exit 1;
            fi
          done
          # 修正校验文件路径和错误提示
          if ! grep -q "🌐央视频道,#genre#" "output/subscribe/full.txt"; then
            echo "错误：output/subscribe/full.txt 缺失关键分类，终止提交";
            exit 1;
          fi

      - name: 清理历史归档
        run: |
          mkdir -p ${{ env.HISTORY_DIR }}
          find ${{ env.HISTORY_DIR }} -name "*.zip" -type f -mtime +${{ env.RETAIN_DAYS }} -delete

      - name: 生成今日归档
        run: |
          if git diff --quiet ${{ env.FILES_TO_ARCHIVE }}; then
            echo "文件未修改，不生成新归档";
          else
            current_datetime=$(date +"%Y%m%d_%H%M%S")
            zip_filename="${{ env.HISTORY_DIR }}/${current_datetime}_archive.zip"
            zip -j "${zip_filename}" ${{ env.FILES_TO_ARCHIVE }}
            git add "${zip_filename}"
            echo "新归档生成：${zip_filename}"
          fi

      - name: 提交并推送更改
        run: |
          git add output/subscribe/full.txt output/subscribe/full.m3u output/subscribe/simple.txt output/subscribe/simple.m3u output/subscribe/others.txt output/subscribe/sports.html output/subscribe/custom.txt output/subscribe/custom.m3u ${{ env.HISTORY_DIR }}/
          git commit -m ":tada: 自动更新 $(date +'%Y%m%d')" || echo "无主文件修改需提交"
          git pull origin main --rebase --autostash --allow-unrelated-histories || git pull origin main --force
          git push origin main --force-with-lease || git push origin main --force

      - name: 保存生成的文件
        uses: actions/upload-artifact@v4
        with:
          name: generated-files
          path: |
            output/subscribe/full.txt
            output/subscribe/full.m3u
            output/subscribe/simple.txt
            output/subscribe/simple.m3u
            output/subscribe/others.txt
            output/subscribe/sports.html
            output/subscribe/custom.txt
            output/subscribe/custom.m3u
            ${{ env.HISTORY_DIR }}/*.zip